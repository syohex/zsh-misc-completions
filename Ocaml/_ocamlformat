#compdef ocamlformat

# The MIT License (MIT)
#
# Copyright (c) 2024 Shohei YOSHIDA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for ocamlformat 0.26.2 (https://github.com/ocaml-ppx/ocamlformat)
#  This completion does not support configuration options
#
# ------------------------------------------------------------------------------

_arguments \
  '--check[Check whether the input files already are formatted]'\
  '--comment-check[Control whether to check comments and documentation comments]' \
  '--disable[Disable ocamlformat]' \
  '--disable-conf-attrs[Disable configuration in attributes]' \
  '--disable-conf-files[Disable .ocamlformat configuration files]' \
  '--doc[Parse input as an odoc documentation]' \
  '--enable-outside-detected-project[Format for files that are outside project]' \
  {-g,--debug}'[Generate debugging output]' \
  '(-i --inplace -o --output)'{-i,--inplace}'[Format in-place, overwriting input files]' \
  '--ignore-invalid-option[ignore invalid options]' \
  '(--impl --intf)--impl[Parse input as an implementation]' \
  '(--impl --intf)--intf[Parse input as an interface]' \
  '--margin-check[Emit a warning if the formatted output exceeds the margin]' \
  {-N,--max-iters=}'[Fail if output of formatting does not stabilize within N iteractions]:count' \
  '--name=[Name of input file for use in error reporting]:name' \
  '--no-comment-check[Unset comment-check]' \
  '--no-debug[Unset debug]' \
  '--no-disable[Unset disable]' \
  '--no-disable-conf-attrs[Unset disable-conf-attrs]' \
  '--no-margin-check[Unset margin-check]' \
  '--no-quiet[Unset quiet]' \
  '--no-version-check[Unset version-check]' \
  '(-i --inplace -o --output)'{-o,--output=}'[Output file]:file:_files' \
  '--ocaml-version=[Version of OCaml syntax of the output]:version' \
  '--ocp-indent-config[Read .ocp-indent configuration files]' \
  '--print-config[Print the configuration determined by envvars, configuration, profile, command line]' \
  {-q,--quiet}'[Quiet mode]' \
  '--repl-file[Parse input as toplevel phrases with their output]' \
  '--root=[Root of the project]:dir:_files -/' \
  '--version-check[Check that the version matches the one specified in .ocamlformat]' \
  '(- *)--help=-[Show help]:format:(auto pager groff plain)' \
  '(- *)--version[Show version information]'

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
