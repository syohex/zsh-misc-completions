#compdef milla

# The MIT License (MIT)
#
# Copyright (c) 2022 Shohei YOSHIDA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for milla v1.0.21 (https://github.com/miyagawa/Dist-Milla)
#
# ------------------------------------------------------------------------------

_milla() {
  typeset -A opt_args
  local context state line
  local ret=1

  _arguments -C \
    '(-v --verbose)'{-v,--verbose}'[log additional output]' \
    \*{-V,--verbose-plugin}'[log additional output from some plugins only]:plugin' \
    \*{-I,--lib-inc}'[additional \@INC dirs]: :_files -/' \
    '(- *)'{-h,--help}'[show help]' \
    '1: :_milla_commands' \
    '*:: :->args' && ret=0

  case "$state" in
    (args)
      local -a opts
      local curcontext=$context

      case "$words[1]" in
        (add|new)
          opts=(
            '(-p|--profile)'{-p,--profile}'[name of the profile to use]:profile'
            '(-P|--provider)'{-P,--provider}'[name of the profile provider to use]:provider'
          )
          ;;
        (authordeps)
          opts=(
            '--root[the root of the dist; defaults to]: :_files -/'
            '--missing[list only the missing dependencies]'
            '--versions[include required version numbers in listing]'
          )
          ;;
        (build)
          opts=(
            '--trial[build a trial release that PAUSE will not index]'
            '--tgz[build a tarball (default behavior)]'
            '--in[the directory in which to build the distribution]: :_files -/'
          )
          ;;
        (clean)
          opts=(
            '(-n|--dry-run)'{-n,--dry-run}"[don't actually remove anything, just show what would be done]"
          )
          ;;
        (install)
          opts=(
            '--install-command[command to run to install (e.g. "cpan .")]:command'
            '--keep-build-dir[keep the build directory even after a success]'
          )
          ;;
        (listdeps)
          opts=(
            '--develop[include author/develop dependencies]'
            '--missing[list only the missing dependencies]'
            '--requires[list the required dependencies]'
            '--recommends[list the recommended dependencies]'
            '--suggests[list the suggested dependencies]'
            '--versions[include required version numbers in listing]'
            '--cpanm--versions[format versions for consumption by cpanm]'
            '--json[list dependencies by phase, in JSON format]'
            '--omit-core[omit dependencies that are shipped with the specified version of perl]:version'
          )
          ;;
        (release)
          opts=(
            '--trial[build a trial release that PAUSE will not index]'
            '--jobs[number of parallel test jobs to run]:jobs'
          )
          ;;
        (smoke)
          opts=(
            '--release[the RELEASE_TESTING env variable]'
            '--automated[enables the AUTOMATED_TESTING env variable (default behavior)]'
            '--author[enables the AUTHOR_TESTING env variable]'
          )
          ;;
        (test)
          opts=(
            '--release[enables the RELEASE_TESTING env variable]'
            '--automated[enables the AUTOMATED_TESTING env variable]'
            '--extended[enables the EXTENDED_TESTING env variable]'
            '--author[enables the AUTHOR_TESTING env variable (default behavior)]'
            '--all[enables the RELEASE_TESTING, AUTOMATED_TESTING and AUTHOR_TESTING env variables]'
            '--keep-build-dir[keep the build directory even after a success]'
            '--jobs[number of parallel test jobs to run]:jobs'
            '--test-verbose[enable verbose testing]'
          )
          ;;
        (help)
          opts=()
          local -a commands=(
            "commands" "help" "add" "authordeps" "build" "clean" "install"
            "listdeps" "new" "nop" "release" "run" "setup" "smoke" "test"
          )
          _arguments : "$opts[@]" "*::help:($commands)"
          return
          ;;
        *)
          opts=()
          ;;
      esac

      _arguments -s : "$opts[@]" '*::Files:_files'
      ;;
  esac

  return $ret
}

(( $+functions[_milla_commands] )) ||
_milla_commands() {
  local -a commands=(
    "commands:list the application's commands"
    "help:display a command's help screen"
    "add:add modules to an existing dist"
    "authordeps:list your distribution's author dependencies"
    "build:build your dist"
    "clean:clean up after build, test, or install"
    "install:install your dist"
    "listdeps:print your distributions prerequisites"
    "new:mint a new dist"
    "nop:do nothing:initialize dzil, then exit"
    "release:release your dist"
    "run:run stuff in a dir where your dist is built"
    "setup:set up a basic global config file"
    "smoke:smoke your dist"
    "test:test your dist"
  )

  _describe -t commands "commands" commands
}

_milla "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
