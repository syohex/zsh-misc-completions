#compdef start_server

# The MIT License (MIT)
#
# Copyright (c) 2022 Shohei YOSHIDA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for start_server 0.35 (https://github.com/kazuho/p5-Server-Starter)
#
# ------------------------------------------------------------------------------

local -a signals=($(kill -l | perl -lne 'print "SIG$_" for split " "'))

_arguments -n : \
  '--port=[TCP port to listen to]:port' \
  '--path=[path at where to listen using UNIX socket]: :_files' \
  '--dir=[working directory, start_server do chdir to before exec]: :_files -/' \
  '--interval=[minimum interval to respawn the server program(default: 1)]:seconds' \
  '--signal-on-hup=[signal to be sent the server process when start_server receives a SIGHUP]: :'"($signals)" \
  '--signal-on-term=[signal to be sent the server process when start_server receives a SIGTERM]: :'"($signals)" \
  '--pid-file=[if set, writes the process id of the start_server process to the file]: :_files' \
  '--status-file=[if set, writes the status of the server process to the file]: :_files' \
  '--envdir=[directory that contains environment variables to the server processes and superdaemon]: :_files -/' \
  '--log-file=[if set, redirects STDOUT and STDERR to given file or command]: :_files' \
  '--daemonize[daemonizes the server(by doing fork, setsid, fork). Must be used together with "--log-file"]' \
  '--enable-auto-restart[enables automatic restart by time]' \
  '--auto-restart-interval=[automatic restart interval(default 360)]:seconds' \
  '--kill-old-delay=[time to suspend to send a signal to the old worker]:seconds' \
  '--backlog=[specifies a listen backlog parameter, whose default is SOMAXCONN]:backlog' \
  '--restart[sends SIGHUP to the process and waits until the server of the older generation die]' \
  '--stop[sends SIGTERM to the process]' \
  '(- :)--help[prints this help]' \
  '(- :)--version[prints the version number]' \
  '(-):command: _command_names -e' \
  '*::arguments:_normal'

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
