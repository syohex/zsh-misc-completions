#compdef carton

# The MIT License (MIT)
#
# Copyright (c) 2022 Shohei YOSHIDA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for the carton v1.0.35 (https://github.com/perl-carton/carton)
#
# ------------------------------------------------------------------------------

_carton() {
  typeset -A opt_args
  local context state line
  local ret=1

  _arguments -C \
    '(- *)'{-h,--help}'[Show help message]' \
    '(- *)'{-v,--version}'[Show version number and exit]' \
    '--verbose[Enable verbose mode]' \
    '1: :_carton_subcommands' \
    '*:: :->args' && ret=1

  case $state in
    (args)
      case "$words[1]" in
      (check)
        opts=('--cpanfile=[Specify cpanfile path]: :_files')
        ;;
      (install)
        opts=(
          '(-p --path)'{-p,--path}'[Specify the path to install modules to]: :_files -/'
          '--cpanfile[Specify the alternate path for cpanfile]: :_files'
          '(--deployment --nodeployment)--deployment[Force the deployment mode]'
          '(--deployment --nodeployment)--nodeployment[No deplyment mode]'
          '--without[Specify phases or features to exclude]: :(development)'
          '(--cached --nocached)--cached[Use cache]'
          '(--cached --nocached)--nocached[Not use cache]'
        )
        ;;
      (list)
        opts=(
          '--distfile[Displays the list of distributions in a distfile format]'
        )
        ;;
      (help)
        _carton_subcommands
        return 0
        ;;
      (exec)
        opts=()
        _arguments -s : "$opts[@]" '*::arguments:_normal'
        return 0
        ;;
      (*)
        opts=()
        ;;
    esac
    _arguments -s : "$opts[@]" '*:: :()' && ret=0
    ;;
  esac

  return $ret
}

(( $+functions[_carton_subcommands] )) ||
_carton_subcommands() {
  local -a commands=(
    'bundle:Bundle dependencies'
    'check:Check if your cpanfile and local environment are in sync'
    'exec:Execute your script in a carton local environment'
    'fatpack:fatpack module'
    'help:Show document'
    'install:Install dependencies'
    'list:List dependencies tracked in the carton.lock file'
    'show:Show the module information'
    'tree:List dependencies in a tree structure'
    'update:Update distribution'
    'usage:Show usage'
    'version:Show version'
  )

  _describe -t subcommands 'subcommands' commands
}

_carton "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
