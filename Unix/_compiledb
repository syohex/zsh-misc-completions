#compdef compiledb

# The MIT License (MIT)
#
# Copyright (c) 2022 Shohei YOSHIDA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for compiledb 0.10.1 (https://github.com/nickdiego/compiledb)
#
# ------------------------------------------------------------------------------

typeset -A opt_args
local context state line
local ret=1

_arguments -C \
  '(-p --parse)'{-p,--parse}'[Build log file to parse compilation commands from(default: stdin)]: :_files' \
  '(-o --output)'{-o,--output}'[Output file name(default: compile_commands.json)]: :_files' \
  '(-d --build-dir)'{-d,--build-dir}'[Path to be used as initial build dir]: :_files -/' \
  '(-n --no-build)'{-n,--no-build}'[Only generates compilation db file]' \
  '(-v --verbose)'{-v,--verbose}'[Print verbose message]' \
  '(-f --overwrite)'{-f,--overwrite}'[Overwrite compile_commands.json instead of just updating it]' \
  '(-S --no-strict)'{-S,--no-strict}'[Do not check if source files exist in the file system]' \
  '(-m --macros)'{-m,--macros}'[Add predefined compiler macros to the compilation database]' \
  '--full-path[Write full path to the compiler executable]' \
  '--command-style[Output compilation database with single "command" string]' \
  '1: :(make)' \
  '*: :->make_args' && ret=0

case $state in
  (make_args)
    if (( $+functions[_make] )); then
      compset -n 2
      _make "$@" && ret=0
    fi
    ;;
esac

return $ret

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
